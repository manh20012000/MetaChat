import Conversation from '../../type/Home/Converstation_type';
import { Message_type } from '../../type/Home/Chat_type';
import {realm} from '../Schema/schema_realm_model';
import {itemuser} from '../../type/Home/search_type';
import { BSON, EJSON, ObjectId } from 'bson';

import { deleteData, postData } from '../../service/resfull_api';
import { API_ROUTE } from '../../service/api_enpoint';
const createConversation = async (Conversation: Conversation) => {
  try {
    // Ki·ªÉm tra xem cu·ªôc h·ªôi tho·∫°i c√≥ t·ªìn t·∫°i kh√¥ng
    const existingConversation = realm.objectForPrimaryKey(
      'Conversation',
      Conversation._id,
    );

    if (existingConversation) {
      console.log('Cu·ªôc h·ªôi tho·∫°i ƒë√£ t·ªìn t·∫°i, kh√¥ng th√™m m·ªõi.');
      return; // D·ª´ng l·∫°i n·∫øu ƒë√£ t·ªìn t·∫°i
    }

    // N·∫øu kh√¥ng t·ªìn t·∫°i, th√™m v√†o Realm
    realm.write(() => {
      realm.create('Conversation', {
        _id: Conversation._id, // S·ª≠ d·ª•ng ID c·ªßa cu·ªôc h·ªôi tho·∫°i
        roomName: Conversation.roomName,
        avatar: Conversation.avatar,
        color: Conversation.color,
        icon: Conversation.icon,
        background: Conversation.background,
        participants: Conversation.participants,
        participantIds: Conversation.participantIds,
        messages: Conversation.messages,
        permission: Conversation.permission,
        isDeleted: Conversation.isDeleted,
      });
    });

    console.log('Cu·ªôc h·ªôi tho·∫°i ƒë√£ ƒë∆∞·ª£c th√™m v√†o Realm.');
  } catch (error) {
    console.error('L·ªói khi t·∫°o cu·ªôc h·ªôi tho·∫°i:', error);
  }
};


const getConversations = async () => {
  try {
    const conversations = realm
      .objects('Conversation')
      .sorted('updatedAt', true);
    return conversations;
  } catch (error: any) {
    console.error(
      'L·ªói khi l·∫•y danh s√°ch cu·ªôc h·ªôi tho·∫°i:',
      error.message,
      error.stack,
    );
    return [];
  }
};
//
const update_Converstation = async (
  message: Message_type,
  participantIds: string[],
) => {
  try {
    const conditions = participantIds
      .map((id, index) => `ANY participants.user._id == $${index}`)
      .join(' AND ');

    const matchingConversation: any = realm
      .objects('Conversation')
      .filtered(conditions, ...participantIds)[0];

    if (!matchingConversation) {
      throw new Error('Kh√¥ng t√¨m th·∫•y cu·ªôc h·ªôi tho·∫°i ph√π h·ª£p.');
    }
    realm.write(() => {
      // C·∫≠p nh·∫≠t `lastMessage` v√† th√™m tin nh·∫Øn m·ªõi
      matchingConversation.lastMessage = message;
      matchingConversation.messages.unshift(message); // Th√™m v√†o ƒë·∫ßu danh s√°ch
      matchingConversation.updatedAt = new Date().toISOString(); // C·∫≠p nh·∫≠t th·ªùi gian s·ª≠a ƒë·ªïi
    });

  
  } catch (error: any) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t cu·ªôc h·ªôi tho·∫°i:', error.message);
    throw error;
  }
};



//
 let isProcessing = false;
const findAndconvertConversation = async (
  participants:any,
  participantIds:string[],
  checking:any,
) => {
  try {

    // T·∫°o query l·ªçc c√°c cu·ªôc h·ªôi tho·∫°i c√≥ ƒë·ªß participantIds
    const conditions = participantIds
      .map((id, index) => `participantIds CONTAINS $${index}`)
      .join(' AND ');

    const conversations = realm
      .objects('Conversation')
      .filtered(
        `participantIds.@size == ${participantIds.length} AND ${conditions}`,
        ...participantIds,
      );

    let existingConversation = conversations[0] || null; // L·∫•y cu·ªôc h·ªôi tho·∫°i ƒë·∫ßu ti√™n n·∫øu c√≥
  
    if (existingConversation) {
      // N·∫øu ƒë√£ c√≥, c·∫≠p nh·∫≠t updatedAt v√† tr·∫£ v·ªÅ ngay
      realm.write(() => {

        existingConversation.updatedAt = new Date().toISOString();
        existingConversation.isDeleted = null;
      });
      return existingConversation;
    } else {
      const newConversation = {
        _id: new ObjectId().toString(),
        roomName: null,
        avatar: null,
        color: 'black',
        icon: 'üëç',
        background: 'blue',
        createAt: new Date().toISOString(), // Chuy·ªÉn Date th√†nh chu·ªói
        participants: participants,
        participantIds: participantIds,
        messages: [],
        permission: 'lock',
        isDeleted: null,
      };
      return newConversation;
    }
  } catch (error) {
    console.error('L·ªói khi t√¨m ho·∫∑c t·∫°o m·ªõi cu·ªôc h·ªôi tho·∫°i:', error);
    throw error;
  }
}

const update_permission = async (conversation: Conversation) => {
  const oldConversation = realm.objectForPrimaryKey(
    'Conversation',
    conversation._id,
  );
  if (oldConversation) {
    realm.write(() => {
      oldConversation.permission = conversation.permission;
    });
  }
}
const delete_converStation = async (
  converstation: Conversation,
  checking: any,
  // setConversations: (data: Conversation[]) => void // H√†m c·∫≠p nh·∫≠t state
) => {
  try {
    console.log('B·∫Øt ƒë·∫ßu delete');

    const oldConversation = realm.objectForPrimaryKey(
      'Conversation',
      converstation._id
    );

    if (!oldConversation) {
      console.warn('Cu·ªôc h·ªôi tho·∫°i kh√¥ng t·ªìn t·∫°i trong Realm');
      return;
    }

    // X√≥a kh·ªèi Realm tr∆∞·ªõc
    realm.write(() => {
      realm.delete(oldConversation);
    });

    // G·ªçi API x√≥a tr√™n server
    // const respon = await deleteData(
    //   API_ROUTE.DELETE_CONVERSTATION,
    //   checking,
    //   converstation._id
    // );

    // if (respon.status !== 200) {
    //   throw new Error('X√≥a cu·ªôc h·ªôi tho·∫°i tr√™n server th·∫•t b·∫°i.');
    // }

    console.log('X√≥a th√†nh c√¥ng!');

    // C·∫≠p nh·∫≠t danh s√°ch cu·ªôc h·ªôi tho·∫°i sau khi x√≥a
    // const updatedConversations = realm.objects<Conversation>('Conversation');
    // setConversations([...updatedConversations]); // C·∫≠p nh·∫≠t l·∫°i state c·ªßa UI

  } catch (error: any) {
    console.error('L·ªói khi x√≥a cu·ªôc h·ªôi tho·∫°i:', error.message, error.stack);
    throw error;
  }
};
const updateMessage = (participantIds:[string],message:Message_type) => {
  const conditions = participantIds
    .map((id, index) => `participantIds CONTAINS $${index}`)
    .join(' AND ');

  const conversations = realm
    .objects('Conversation')
    .filtered(
      `participantIds.@size == ${participantIds.length} AND ${conditions}`,
      ...participantIds,
    );

  let existingConversation = conversations[0] || null; // L·∫•y cu·ªôc h·ªôi tho·∫°i ƒë·∫ßu ti√™n n·∫øu c√≥
};

export {
  updateMessage,
  createConversation,
  delete_converStation,
  update_Converstation,
  getConversations,
  findAndconvertConversation,
};

//const update_Messages_Converstation = async (converstation:Conversation) => {
//     const updateMessage = realm.objects('Conversation');
//     try {
//         updateMessage.forEach((converstation_item) => {
//             if (converstation_item._id === converstation._id) {
//                 realm.write(() => {
//                     converstation_item.lastMessage = converstation.lastMessage;
//                     converstation_item.roomName = converstation.roomName;
//                     converstation_item.avatar = converstation.avatar;
//                     converstation_item.participants = converstation.participants;
//                     converstation_item.color = converstation.color;
//                     converstation_item.icon = converstation.icon;
//                     converstation_item.background = converstation.background;
//                     console.log('Cu·ªôc h·ªôi tho·∫°i ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.');
//                 });
//             }
//         })
//         return converstation;
//     } catch (error: any) {
//         console.log(error,'error with update converstation')
//       }

// }
//const convertConverstation = async (conversation: Conversation) => {
//   try {
//     const existingConversation = realm.objectForPrimaryKey(
//       'Conversation',
//       conversation._id,
//     );

//     if (existingConversation) {
//       // N·∫øu ƒë√£ t·ªìn t·∫°i, chuy·ªÉn cu·ªôc h·ªôi tho·∫°i l√™n ƒë·∫ßu danh s√°ch
//       realm.write(() => {
//         const updatedConversation = {
//           ...existingConversation,
//         };
//         realm.delete(existingConversation); // X√≥a b·∫£n ghi c≈©
//         realm.create('Conversation', updatedConversation); // T·∫°o l·∫°i ƒë·ªÉ ƒë∆∞a l√™n ƒë·∫ßu
//       });

//       console.log(
//         `Cu·ªôc h·ªôi tho·∫°i v·ªõi ID ${conversation._id} ƒë√£ ƒë∆∞·ª£c chuy·ªÉn l√™n ƒë·∫ßu.`,
//       );
//     }
//   } catch (error) {
//     console.error('L·ªói khi chuy·ªÉn cu·ªôc h·ªôi tho·∫°i l√™n ƒë·∫ßu:', error);
//     throw error;
//   }
// }
 // matchingConversation.messages.forEach(message => {
        //   realm.delete(message.reactions); // X√≥a c·∫£m x√∫c li√™n quan
        //   realm.delete(message.attachments); // X√≥a file ƒë√≠nh k√®m
        //   if (message.replyTo) {
        //     realm.delete(message.replyTo); // X√≥a tin nh·∫Øn ƒë∆∞·ª£c tr·∫£ l·ªùi
        //   }
        // });
        // Sau ƒë√≥ x√≥a t·∫•t c·∫£ tin nh·∫Øn
// realm.delete(matchingConversation.messages)c;
//const update_Converstation = async(
//   message: Message_type,
//   participantIds: string[],
// ) => {
//   try {
//     // T·∫°o ƒëi·ªÅu ki·ªán t√¨m ki·∫øm
//     const conditions = participantIds
//       .map((id, index) => `ANY participants.user._id == $${index}`)
//       .join(' AND '); // S·ª≠ d·ª•ng "AND" ƒë·ªÉ ƒë·∫£m b·∫£o t·∫•t c·∫£ ƒë·ªÅu kh·ªõp

//     // Th·ª±c hi·ªán truy v·∫•n v·ªõi tham s·ªë
//     const matchingConversation: any = realm
//       .objects('Conversation')
//       .filtered(conditions, ...participantIds)[0];

//     if (!matchingConversation) {
//       throw new Error('Kh√¥ng t√¨m th·∫•y cu·ªôc h·ªôi tho·∫°i ph√π h·ª£p.');
//     }

//     // Sao ch√©p d·ªØ li·ªáu c·∫ßn thi·∫øt t·ª´ matchingConversation v√†o tempConversation
//     const tempConversation = {
//       _id: matchingConversation._id,
//       roomName: matchingConversation.roomName,
//       avatar: matchingConversation.avatar,
//       color: matchingConversation.color,
//       icon: matchingConversation.icon,
//       background: matchingConversation.background,
//       participants: matchingConversation.participants.map((p:any) => ({...p})), // Deep copy
//       messages: matchingConversation.messages.map((m:any) => ({...m})), // Deep copy
     
//     };

//     // Ghi v√†o Realm trong m·ªôt giao d·ªãch
//     realm.write(() => {
//       // X√≥a b·∫£n ghi c≈© sau khi ƒë√£ sao ch√©p d·ªØ li·ªáu v√†o tempConversation
//       realm.delete(matchingConversation);
//       console.log('B·∫£n ghi n√†y ƒë∆∞·ª£c x√≥a');

//       // T·∫°o b·∫£n ghi m·ªõi
//        const newConversation = realm.create('Conversation', {
//          ...tempConversation,
//          lastMessage: message,
//          messages: [message,...tempConversation.messages ],
//         });
//         // Realm.UpdateMode.Modified,
//       console.log('B·∫£n ghi m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o:111->>>>>  ');
     
//     });
//   } catch (error: any) {
//     console.error('L·ªói khi thay th·∫ø cu·ªôc h·ªôi tho·∫°i:', error.message);
//     throw error;
//   }
// };
